'use strict';

exports.__esModule = true;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _constants = require('./constants');

var _resolveModuleDefault = require('./utils/resolveModuleDefault');

var _resolveModuleDefault2 = _interopRequireDefault(_resolveModuleDefault);

var _componentTracker = require('./componentTracker');

var componentTracker = _interopRequireWildcard(_componentTracker);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/sort-comp */


var EmptyComponent = function EmptyComponent() {
  return null;
};

function loadable(getComponent) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$ErrorComponent = _ref.ErrorComponent,
      ErrorComponent = _ref$ErrorComponent === undefined ? EmptyComponent : _ref$ErrorComponent,
      _ref$LoadingComponent = _ref.LoadingComponent,
      LoadingComponent = _ref$LoadingComponent === undefined ? EmptyComponent : _ref$LoadingComponent;

  var LoadableComponent = function (_React$Component) {
    _inherits(LoadableComponent, _React$Component);

    function LoadableComponent() {
      var _temp, _this, _ret;

      _classCallCheck(this, LoadableComponent);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
        Component: LoadableComponent.Component,
        error: null
      }, _this.mounted = false, _temp), _possibleConstructorReturn(_this, _ret);
    }

    LoadableComponent.load = function load() {
      if (!LoadableComponent.loadingPromise) {
        LoadableComponent.loadingPromise = getComponent().then(function (module) {
          var Component = (0, _resolveModuleDefault2.default)(module);
          LoadableComponent.Component = Component;
          return Component;
        }).catch(function (error) {
          LoadableComponent.loadingPromise = null;
          throw error;
        });
      }

      return LoadableComponent.loadingPromise;
    };

    LoadableComponent.prototype.componentWillMount = function componentWillMount() {
      var _this2 = this;

      if (typeof window === 'undefined' || this.state.Component !== null) return;

      LoadableComponent.load().then(function (Component) {
        _this2.safeSetState({ Component: Component });
      }).catch(function (error) {
        _this2.safeSetState({ error: error });
      });
    };

    LoadableComponent.prototype.componentDidMount = function componentDidMount() {
      this.mounted = true;
    };

    LoadableComponent.prototype.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };

    LoadableComponent.prototype.safeSetState = function safeSetState(state) {
      if (!this.mounted) return;
      this.setState(state);
    };

    LoadableComponent.prototype.render = function render() {
      var _state = this.state,
          Component = _state.Component,
          error = _state.error;


      if (Component !== null) {
        return _react2.default.createElement(Component, this.props);
      }

      if (error !== null) {
        return _react2.default.createElement(ErrorComponent, { error: error, props: this.props });
      }

      return _react2.default.createElement(LoadingComponent, this.props);
    };

    return LoadableComponent;
  }(_react2.default.Component);

  LoadableComponent.Component = null;
  LoadableComponent.loadingPromise = null;


  var id = componentTracker.track(LoadableComponent);
  LoadableComponent[_constants.LOADABLE] = function () {
    return LoadableComponent;
  };
  LoadableComponent.componentId = id;

  return LoadableComponent;
}

exports.default = loadable;