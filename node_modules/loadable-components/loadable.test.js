'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _enzyme = require('enzyme');

var _Dummy = require('./__fixtures__/Dummy');

var _Dummy2 = _interopRequireDefault(_Dummy);

var _loadable = require('./loadable');

var _loadable2 = _interopRequireDefault(_loadable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /* eslint-disable react/prop-types */


describe('#loadable', function () {
  var getComponent = void 0;
  var Loadable = void 0;

  beforeEach(function () {
    getComponent = jest.fn(function () {
      return Promise.resolve().then(function () {
        return require('./__fixtures__/Dummy');
      });
    });
    Loadable = (0, _loadable2.default)(getComponent);
  });

  it('should load component using import', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var wrapper;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            wrapper = (0, _enzyme.mount)(_react2.default.createElement(Loadable, null));

            expect(wrapper.find('EmptyComponent').exists()).toBe(true);
            _context.next = 4;
            return Loadable.load();

          case 4:
            wrapper.update();
            expect(wrapper.contains(_react2.default.createElement(_Dummy2.default, null))).toBe(true);

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  it('should not load it two times', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
    var wrapper;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            wrapper = (0, _enzyme.mount)(_react2.default.createElement(Loadable, null));

            expect(wrapper.find('EmptyComponent').exists()).toBe(true);
            Loadable.load();
            _context2.next = 5;
            return Loadable.load();

          case 5:
            wrapper.update();
            expect(getComponent).toHaveBeenCalledTimes(1);
            expect(wrapper.contains(_react2.default.createElement(_Dummy2.default, null))).toBe(true);

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  it('should render it directly if component is already loaded', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
    var wrapper;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return Loadable.load();

          case 2:
            wrapper = (0, _enzyme.mount)(_react2.default.createElement(Loadable, null));

            expect(wrapper.contains(_react2.default.createElement(_Dummy2.default, null))).toBe(true);

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  it('should do nothing if component is not mounted', _asyncToGenerator(regeneratorRuntime.mark(function _callee4() {
    var wrapper;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            wrapper = (0, _enzyme.mount)(_react2.default.createElement(Loadable, null));

            wrapper.unmount();
            _context4.next = 4;
            return Loadable.load();

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));

  describe('server-side', function () {
    var windowBackup = void 0;

    beforeEach(function () {
      windowBackup = global.window;
      delete global.window;
    });

    afterEach(function () {
      global.window = windowBackup;
    });

    it('should ignore loading', _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {
      return regeneratorRuntime.wrap(function _callee5$(_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              expect((0, _server.renderToStaticMarkup)(_react2.default.createElement(Loadable, null))).toBe('');
              _context5.next = 3;
              return Loadable.load();

            case 3:
              expect((0, _server.renderToStaticMarkup)(_react2.default.createElement(Loadable, null))).toBe('<div></div>');

            case 4:
            case 'end':
              return _context5.stop();
          }
        }
      }, _callee5, undefined);
    })));
  });

  it('should be possible to add a loading component', _asyncToGenerator(regeneratorRuntime.mark(function _callee6() {
    var LoadableWithLoading, wrapper;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            LoadableWithLoading = (0, _loadable2.default)(function () {
              return Promise.resolve().then(function () {
                return require('./__fixtures__/Dummy');
              });
            }, {
              LoadingComponent: function LoadingComponent(_ref7) {
                var className = _ref7.className;
                return _react2.default.createElement(
                  'div',
                  { className: className },
                  'loading'
                );
              }
            });
            wrapper = (0, _enzyme.mount)(_react2.default.createElement(LoadableWithLoading, { className: 'x' }));

            expect(wrapper.contains(_react2.default.createElement(
              'div',
              { className: 'x' },
              'loading'
            ))).toBe(true);
            _context6.next = 5;
            return LoadableWithLoading.load();

          case 5:
            wrapper.update();
            expect(wrapper.contains(_react2.default.createElement(_Dummy2.default, { className: 'x' }))).toBe(true);

          case 7:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  })));

  it('should be possible to add an error component', _asyncToGenerator(regeneratorRuntime.mark(function _callee8() {
    var LoadableWithError, wrapper;
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            LoadableWithError = (0, _loadable2.default)(_asyncToGenerator(regeneratorRuntime.mark(function _callee7() {
              return regeneratorRuntime.wrap(function _callee7$(_context7) {
                while (1) {
                  switch (_context7.prev = _context7.next) {
                    case 0:
                      throw new Error('Bouh');

                    case 1:
                    case 'end':
                      return _context7.stop();
                  }
                }
              }, _callee7, undefined);
            })), {
              ErrorComponent: function ErrorComponent(_ref10) {
                var error = _ref10.error,
                    props = _ref10.props;
                return _react2.default.createElement(
                  'div',
                  { className: props.className },
                  error.message
                );
              }
            });
            wrapper = (0, _enzyme.mount)(_react2.default.createElement(LoadableWithError, { className: 'x' }));

            expect(wrapper.find('EmptyComponent').exists()).toBe(true);
            _context8.prev = 3;
            _context8.next = 6;
            return new Promise(function (resolve) {
              return setTimeout(resolve);
            });

          case 6:
            _context8.next = 8;
            return LoadableWithError.load();

          case 8:
            _context8.next = 14;
            break;

          case 10:
            _context8.prev = 10;
            _context8.t0 = _context8['catch'](3);

            wrapper.update();
            expect(wrapper.contains(_react2.default.createElement(
              'div',
              { className: 'x' },
              'Bouh'
            ))).toBe(true);

          case 14:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, undefined, [[3, 10]]);
  })));
});