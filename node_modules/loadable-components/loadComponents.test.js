'use strict';

var _constants = require('./constants');

var _ = require('./');

var _2 = _interopRequireDefault(_);

var _componentTracker = require('./componentTracker');

var componentTracker = _interopRequireWildcard(_componentTracker);

var _loadComponents = require('./loadComponents');

var _loadComponents2 = _interopRequireDefault(_loadComponents);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /* eslint-env browser */


describe('loadComponents', function () {
  var Component1 = void 0;
  var Component2 = void 0;

  beforeEach(function () {
    Component1 = (0, _2.default)(_asyncToGenerator(regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', function () {
                return null;
              });

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined);
    })));
    jest.spyOn(Component1, 'load');
    Component2 = (0, _2.default)(_asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              return _context2.abrupt('return', function () {
                return null;
              });

            case 1:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    })));
    jest.spyOn(Component2, 'load');
    var id1 = componentTracker.track(Component1);
    var id2 = componentTracker.track(Component2);
    window[_constants.COMPONENT_IDS] = [id1, id2];
  });

  it('should load all components', _asyncToGenerator(regeneratorRuntime.mark(function _callee3() {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return (0, _loadComponents2.default)();

          case 2:
            expect(Component1.load).toHaveBeenCalled();
            expect(Component2.load).toHaveBeenCalled();

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));
});