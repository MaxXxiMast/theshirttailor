'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRouter = require('react-router');

var _ = require('./');

var _Routes = require('../__fixtures__/Routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /* eslint-disable react/prop-types */


describe('server side rendering', function () {
  var app = void 0;

  beforeEach(function () {
    var App = function App() {
      return _react2.default.createElement(
        'div',
        null,
        _react2.default.createElement(_reactRouter.Route, { path: '/books', component: _Routes.Books })
      );
    };

    var context = {};

    app = _react2.default.createElement(
      _reactRouter.StaticRouter,
      { location: '/books/2', context: context },
      _react2.default.createElement(App, null)
    );
  });

  it('should collect ids', _asyncToGenerator(regeneratorRuntime.mark(function _callee() {
    var loadableState;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return (0, _.getLoadableState)(app);

          case 2:
            loadableState = _context.sent;

            expect(loadableState.componentIds).toEqual([1, 0]);

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  describe('without any ids', function () {
    it('should return an empty deferred state', _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {
      var context, loadableState;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              context = {};

              app = _react2.default.createElement(
                _reactRouter.StaticRouter,
                { location: '/books/2', context: context },
                _react2.default.createElement('div', null)
              );
              _context2.next = 4;
              return (0, _.getLoadableState)(app).then(function (x) {
                return x;
              });

            case 4:
              loadableState = _context2.sent;

              expect(loadableState.componentIds).toEqual([]);

            case 6:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, undefined);
    })));
  });
});